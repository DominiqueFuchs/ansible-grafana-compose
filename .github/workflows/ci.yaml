---
name: CI
on:
  pull_request:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - '.gitignore'

jobs:
  molecule:
    name: Molecule
    runs-on: ubuntu-latest
    env:
      PY_COLORS: '1'
      ANSIBLE_FORCE_COLOR: '1'
    strategy:
      matrix:
        image:
          - dfuchs/alma-8-ansible
          - dfuchs/alma-9-ansible
          - dfuchs/debian-11-ansible
          - dfuchs/debian-12-ansible
          - dfuchs/ubuntu-22.04-ansible
          - dfuchs/ubuntu-24.04-ansible

    steps:
      - name: Check out the codebase
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      # RHEL 8 provides Python 3.6, which is not supported by ansible-core 2.17+
      - name: Set up virtual environment
        run: |
          python3 -m venv .venv && source .venv/bin/activate
          if [[ "${{ matrix.image }}" == "dfuchs/alma-8-ansible" ]]; then
            pip install "ansible-core<2.17" ansible-lint molecule molecule-plugins[docker] docker
          else
            pip install ansible-core ansible-lint molecule molecule-plugins[docker] docker
          fi
          ansible-galaxy collection install -r requirements.yml

      - name: Test molecule scenario (default)
        run: source .venv/bin/activate && molecule test -s default
        env:
          MOLECULE_IMAGE: ${{ matrix.image }}

      - name: Test molecule scenario (service_enabled)
        run: source .venv/bin/activate && molecule test -s service_enabled
        env:
          MOLECULE_IMAGE: ${{ matrix.image }}

      - name: Test molecule scenario (service_user)
        run: source .venv/bin/activate && molecule test -s service_user
        env:
          MOLECULE_IMAGE: ${{ matrix.image }}

      - name: Test molecule scenario (acme_proxy_disabled)
        run: source .venv/bin/activate && molecule test -s acme_proxy_disabled
        env:
          MOLECULE_IMAGE: ${{ matrix.image }}

      - name: Test molecule scenario (bind_mounts)
        run: source .venv/bin/activate && molecule test -s bind_mounts
        env:
          MOLECULE_IMAGE: ${{ matrix.image }}

      - name: Test molecule scenario (alertmanager_receivers)
        run: source .venv/bin/activate && molecule test -s alertmanager_receivers
        env:
          MOLECULE_IMAGE: ${{ matrix.image }}

      - name: Test molecule scenario (node_exporters)
        run: source .venv/bin/activate && molecule test -s node_exporters
        env:
          MOLECULE_IMAGE: ${{ matrix.image }}
